visit add_ingredients_path
expect(page).to have_content("Add Ingredients")

<div data-controller="modal">
	<button
		type="button"
		id="add-ingredients-btn"
		data-action="click->modal#open"
	>
		Add Ingredients +
	</button>

	<!-- Backdrop + modal panel (use native `hidden` so it truly doesn't intercept clicks) -->
	<div
		id="ingredients-modal"
		class="modal-backdrop"
		hidden
		data-modal-target="backdrop"
		data-action="click->modal#backdropClose keydown@window->modal#escClose"
	>
		<div class="modal-panel" role="dialog" aria-modal="true" aria-labelledby="ingredients-title" tabindex="-1">
			<!-- Search bar at the very top of the modal -->
			<form role="search" data-action="submit->modal#preventSubmit" style="margin-bottom:.75rem;">
				<label for="ingredients-search" class="visually-hidden">Search ingredients</label>
				<input
					type="search"
					id="ingredients-search"
					name="q"
					placeholder="Search ingredients…"
					data-modal-target="search"
					autocomplete="off"
					style="width:100%; padding:.5rem .75rem; border:1px solid #ccc; border-radius:.5rem;"
				>
			</form>

			<h3 id="ingredients-title" style="margin-top:0;">Add Ingredients</h3>

			<p>Put your inputs here—we’ll flesh this out later.</p>

			<div style="margin-top:1rem; display:flex; gap:.5rem; justify-content:flex-end;">
				<button type="button" data-action="modal#close" id="ingredients-close-btn">Close</button>
			</div>
		</div>
	</div>
</div>

<style>
	/* Browser already treats [hidden] as display:none, but belt + suspenders */
	[hidden] { display: none !important; }

	.modal-backdrop {
		position: fixed; inset: 0;
		display: flex; align-items: center; justify-content: center;
		background: rgba(0,0,0,0.5);
		padding: 1rem;
		z-index: 50;
	}
	.modal-panel {
		background: #fff;
		width: 100%;
		max-width: 32rem;
		border-radius: .75rem;
		padding: 1.25rem 1.5rem;
		box-shadow: 0 10px 25px rgba(0,0,0,.2);
	}

	/* Accessible, visually hidden label */
	.visually-hidden {
		position: absolute !important;
		height: 1px; width: 1px;
		overflow: hidden; clip: rect(1px, 1px, 1px, 1px);
		white-space: nowrap; border: 0; padding: 0; margin: -1px;
	}
</style>

<script>
	// Progressive enhancement fallback:
	// Works if Stimulus isn't ready yet in headless/system tests.
	(function attachWhenReady(fn) {
		if (document.readyState !== "loading") fn();
		else document.addEventListener("DOMContentLoaded", fn);
		// Also run on Turbo page loads (when Turbo is present)
		document.addEventListener("turbo:load", fn);
	})(function () {
		const btn     = document.getElementById("add-ingredients-btn");
		const modal   = document.getElementById("ingredients-modal");
		const panel   = modal && modal.querySelector(".modal-panel");
		const close   = document.getElementById("ingredients-close-btn");
		const search  = document.getElementById("ingredients-search");
		const form    = search && search.closest("form");

		if (!btn || !modal || !panel) return;

		// If Stimulus is connected, it will also respond — this just ensures tests
		// don't flake when Stimulus isn't ready yet.
		btn.addEventListener("click", () => {
			// If Stimulus modal controller attached, let it handle open/close behavior.
			if (modal.dataset.modalConnected === "true") return
			modal.hidden = false;
			if (search) { search.focus(); search.select(); }
			else { panel.focus(); }
		});

		// Prevent accidental page reloads if Enter is pressed in the search field
		if (form) {
			form.addEventListener("submit", (e) => {
				if (modal.dataset.modalConnected === "true") return
				e.preventDefault()
			});
		}

		modal.addEventListener("click", (e) => {
			if (modal.dataset.modalConnected === "true") return
			if (!panel.contains(e.target)) {
				modal.hidden = true;
				if (search) search.value = "";
			}
		});

		if (close) close.addEventListener("click", () => {
			if (modal.dataset.modalConnected === "true") return
			modal.hidden = true;
			if (search) search.value = "";
		});

		document.addEventListener("keydown", (e) => {
			if (modal.dataset.modalConnected === "true") return
			if (e.key === "Escape") {
				modal.hidden = true;
				if (search) search.value = "";
			}
		});
	});
</script>

