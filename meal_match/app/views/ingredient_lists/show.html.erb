<% form_model   = @ingredient_list || IngredientList.new %>
<% form_url     = @ingredient_list ? ingredient_list_path(@ingredient_list) : ingredient_lists_path %>
<% form_method  = @ingredient_list ? :patch : :post %>
<% preselected  = (@selected_ingredients || []).map { |item| { id: item[:id].to_s, name: item[:name].to_s } } %>
<% title_param  = params.dig(:ingredient_list, :title) %>
<% form_title   = title_param.nil? ? form_model.title.to_s : title_param.to_s %>

<div data-controller="modal">
  <button
    type="button"
    id="add-ingredients-btn"
    data-action="click->modal#open"
    class="js-only"
  >
    Add Ingredients +
  </button>

  <div
    id="ingredients-modal"
    class="modal-backdrop"
    hidden
    data-modal-target="backdrop"
    data-action="keydown@window->modal#escClose"
  >
    <div class="modal-panel" role="dialog" aria-modal="true" aria-labelledby="ingredients-title" tabindex="-1">
      <div
        data-controller="ingredient-search"
        data-ingredient-search-preselected-value="<%= preselected.to_json %>"
      >
        <div style="margin-bottom:.5rem;">
          <label for="ingredient-list-name" class="visually-hidden">Ingredient list name</label>
          <input
            type="text"
            id="ingredient-list-name"
            name="ingredient_list[title]"
            form="ingredient-list-form"
            value="<%= form_title %>"
            placeholder="List name…"
            autocomplete="off"
            style="width:100%; box-sizing:border-box; padding:.5rem .75rem; border:1px solid #ccc; border-radius:.5rem;"
          >
        </div>

        <form
          role="search"
          action="<%= ingredient_search_path(format: :html) %>"
          method="get"
          data-action="submit->modal#preventSubmit"
          style="margin-bottom:.75rem;"
        >
          <label for="ingredients-search" class="visually-hidden">Search ingredients</label>
          <input
            type="search"
            id="ingredients-search"
            name="q"
            placeholder="Search ingredients…"
            data-ingredient-search-target="input"
            data-modal-target="search"
            data-action="input->ingredient-search#search"
            autocomplete="off"
            style="width:100%; padding:.5rem .75rem; border:1px solid #ccc; border-radius:.5rem;"
          >
        </form>

        <div id="ingredient-results" data-ingredient-search-target="results" hidden aria-live="polite">
          <% if params[:q].present? %>
            <%= render partial: "ingredient_search_results", locals: { items: @search_items || [] } %>
          <% end %>
        </div>

        <% hidden_container_hidden = preselected.empty? %>
        <div
          id="ingredient-selected"
          data-ingredient-search-target="selected"
          aria-live="polite"
          style="margin-top:.5rem;"
          <%= "hidden" if hidden_container_hidden %>
        >
          <% preselected.each do |item| %>
            <span class="selected-pill" data-ing-id="<%= item[:id] %>"><%= item[:name] %></span>
          <% end %>
        </div>

        <form id="ingredient-list-form" action="<%= form_url %>" method="post" style="margin-top:1rem;">
          <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
          <% if form_method != :post %>
            <input type="hidden" name="_method" value="<%= form_method %>">
          <% end %>

          <div id="ingredient-selected-hidden-inputs" data-ingredient-search-target="hiddenInputs">
            <% preselected.each do |item| %>
              <input type="hidden" name="ingredient_list[selected_ingredient_ids][]" value="<%= item[:id] %>">
            <% end %>
          </div>

          <div style="margin-top:1rem; display:flex; gap:.5rem; justify-content:flex-end;">
            <button type="button" data-action="modal#close" id="ingredients-close-btn">Close</button>
            <button type="submit" id="ingredient-save-btn">Save</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<style>
  [hidden] { display: none !important; }

  .modal-backdrop {
    position: fixed; inset: 0;
    display: flex; align-items: center; justify-content: center;
    background: rgba(0,0,0,0.5);
    padding: 1rem;
    z-index: 50;
  }
  .modal-panel {
    background: #fff;
    width: 100%;
    max-width: 32rem;
    border-radius: .75rem;
    padding: 1.25rem 1.5rem;
    box-shadow: 0 10px 25px rgba(0,0,0,.2);
  }

  .visually-hidden {
    position: absolute !important;
    height: 1px; width: 1px;
    overflow: hidden; clip: rect(1px, 1px, 1px, 1px);
    white-space: nowrap; border: 0; padding: 0; margin: -1px;
  }

  .selected-pill {
    display: inline-block;
    padding: .25rem .5rem;
    margin: .25rem;
    border: 1px solid #ddd;
    border-radius: .5rem;
    background: #f7f7f7;
    cursor: pointer;
  }

  .no-js-editor {
    margin-top: 2rem;
    padding: 1.5rem;
    border: 1px solid #ccc;
    border-radius: .75rem;
    max-width: 32rem;
  }

  .no-js-editor fieldset {
    border: 1px solid #ddd;
    padding: .75rem;
    margin: 1rem 0;
  }

  .no-js-option {
    display: block;
    margin-bottom: .5rem;
  }

  .no-js-actions {
    display: flex;
    gap: .75rem;
    align-items: center;
  }
</style>

<script>
  (function attachWhenReady(fn) {
    if (document.readyState !== "loading") fn();
    else document.addEventListener("DOMContentLoaded", fn);
    document.addEventListener("turbo:load", fn);
  })(function () {
    const btn     = document.getElementById("add-ingredients-btn");
    const modal   = document.getElementById("ingredients-modal");
    const panel   = modal && modal.querySelector(".modal-panel");
    const close   = document.getElementById("ingredients-close-btn");
    const search  = document.getElementById("ingredients-search");
    const form    = search && search.closest("form");

    if (!btn || !modal || !panel) return;

    btn.addEventListener("click", () => {
      if (modal.dataset.modalConnected === "true") return;
      modal.hidden = false;
      if (search) { search.focus(); search.select(); }
      else { panel.focus(); }
    });

    if (form) {
      form.addEventListener("submit", (e) => {
        if (modal.dataset.modalConnected === "true") return;
        e.preventDefault();
      });
    }

    if (close) close.addEventListener("click", () => {
      if (modal.dataset.modalConnected === "true") return;
      modal.hidden = true;
      if (search) search.value = "";
    });

    document.addEventListener("keydown", (e) => {
      if (modal.dataset.modalConnected === "true") return;
      if (e.key === "Escape") {
        modal.hidden = true;
        if (search) search.value = "";
      }
    });
  });
</script>

<noscript>
  <style>
    .js-only { display: none !important; }
  </style>
  <section class="no-js-editor">
    <h2>Manage Ingredient List</h2>
    <%= form_with(model: form_model, url: form_url, method: form_method, local: true) do |form| %>
      <div style="margin-bottom:1rem;">
        <%= form.label :title, "Ingredient list name" %><br>
        <%= form.text_field :title,
                            value: form_title,
                            style: "width:100%; padding:.5rem; border:1px solid #ccc; border-radius:.5rem;" %>
      </div>

      <div style="margin-bottom:1rem;">
        <label for="no-js-search-input">Search ingredients</label><br>
        <input
          type="search"
          id="no-js-search-input"
          name="q"
          value="<%= params[:q].to_s %>"
          style="width:100%; padding:.5rem; border:1px solid #ccc; border-radius:.5rem;"
        >
        <%= hidden_field_tag :ingredient_list_id, @ingredient_list&.id %>
        <div style="margin-top:.5rem;">
          <button type="submit"
                  formmethod="get"
                  formaction="<%= ingredient_search_path(format: :html) %>"
                  style="padding:.5rem 1rem;">Search</button>
        </div>
      </div>

      <% results_items = (@search_items || []) %>
      <% if results_items.present? %>
        <fieldset class="no-js-results">
          <legend>Search results</legend>
          <% existing_ids = Array(@selected_ingredients).map { |item| item[:id] } %>
          <% results_items.each do |raw| %>
            <% provider_id = (raw[:id] || raw['id'] || raw[:provider_id] || raw['provider_id']).to_s %>
            <% name = raw[:name] || raw['name'] || raw[:title] || raw['title'] || "Unnamed ingredient" %>
            <label class="no-js-option">
              <input type="checkbox"
                     name="ingredient_list[selected_ingredient_ids][]"
                     value="<%= provider_id %>"
                     <%= 'checked' if existing_ids.include?(provider_id) %>>
              <span><%= name %></span>
            </label>
          <% end %>
        </fieldset>
      <% end %>

      <% selected_only = Array(@selected_ingredients) %>
      <% if selected_only.present? %>
        <% results_ids = results_items.map { |raw| (raw[:id] || raw['id'] || raw[:provider_id] || raw['provider_id']).to_s } %>
        <fieldset class="no-js-selected">
          <legend>Currently selected</legend>
          <% selected_only.each do |item| %>
            <% next if results_ids.include?(item[:id]) %>
            <label class="no-js-option">
              <input type="checkbox"
                     name="ingredient_list[selected_ingredient_ids][]"
                     value="<%= item[:id] %>"
                     checked>
              <span><%= item[:name] %></span>
            </label>
          <% end %>
        </fieldset>
      <% end %>

      <div class="no-js-actions">
        <%= form.submit "Save" %>
        <%= link_to "Cancel", ingredient_lists_path %>
      </div>
    <% end %>
  </section>
</noscript>

<script>
  (function attachFallback() {
    function renderSelectedFallback(selectedSet, container) {
      if (!container) return;
      container.innerHTML = '';
      if (!selectedSet || selectedSet.size === 0) { container.hidden = true; return; }
      container.hidden = false;
      const ul = document.createElement('ul');
      ul.style.listStyle = 'none';
      ul.style.padding = '0';
      ul.style.margin = '0.5rem 0 0 0';
      Array.from(selectedSet.entries()).forEach(([id, name]) => {
        const li = document.createElement('li');
        li.style.display = 'inline-block';
        li.style.padding = '.25rem .5rem';
        li.style.margin = '.25rem';
        li.style.border = '1px solid #ddd';
        li.style.borderRadius = '.5rem';
        li.style.background = '#f7f7f7';
        li.textContent = name;
        li.dataset.ingId = id;
        li.style.cursor = 'pointer';
        li.addEventListener('click', (e) => {
          e.stopPropagation();
          selectedSet.delete(id);
          renderSelectedFallback(selectedSet, container);
          syncHiddenFallback(selectedSet);
        });
        ul.appendChild(li);
      });
      container.appendChild(ul);
    }

    function syncHiddenFallback(selectedSet) {
      const hiddenContainer = document.getElementById('ingredient-selected-hidden-inputs');
      if (!hiddenContainer) return;
      hiddenContainer.innerHTML = '';
      selectedSet.forEach((_, id) => {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'ingredient_list[selected_ingredient_ids][]';
        input.value = id;
        hiddenContainer.appendChild(input);
      });
    }

    function renderResults(container, items, selectedSet) {
      if (!container) return;
      container.innerHTML = '';
      if (!items || items.length === 0) { container.hidden = true; return; }
      container.hidden = false;
      const ul = document.createElement('ul');
      ul.style.listStyle = 'none';
      ul.style.padding = '0';
      ul.style.margin = '0.5rem 0 0 0';
      items.forEach(it => {
        const li = document.createElement('li');
        li.style.padding = '.5rem';
        li.style.borderBottom = '1px solid #eee';
        li.style.cursor = 'pointer';
        const name = it.name || it.title || 'Unnamed';
        li.textContent = name;
        if (it.id) li.dataset.ingId = it.id;
        li.addEventListener('click', (e) => {
          e.stopPropagation();
          const id = li.dataset.ingId;
          if (!id) return;
          if (selectedSet.has(id)) selectedSet.delete(id);
          else selectedSet.set(id, name);
          renderSelectedFallback(selectedSet, document.getElementById('ingredient-selected'));
          syncHiddenFallback(selectedSet);
        });
        ul.appendChild(li);
      });
      container.appendChild(ul);
    }

    function doSearch(q, container, selectedSet) {
      if (!q) { renderResults(container, [], selectedSet); return; }
      fetch(`/ingredient_search?q=${encodeURIComponent(q)}`, { headers: { Accept: 'application/json' } })
        .then(r => { if (!r.ok) throw new Error('fetch failed'); return r.json(); })
        .then(body => renderResults(container, body.ingredients || [], selectedSet))
        .catch(e => { console.warn('ingredient search failed', e); renderResults(container, [], selectedSet); });
    }

    function wire() {
      const root = document.querySelector('[data-controller="ingredient-search"]');
      if (!root || root.dataset.ingredientSearchConnected === 'true') return;

      const input = document.getElementById('ingredients-search');
      const container = document.getElementById('ingredient-results');
      const selectedContainer = document.getElementById('ingredient-selected');
      const preselected = JSON.parse(root.dataset.ingredientSearchPreselectedValue || '[]');
      const selectedSet = new Map(preselected.map(item => [item.id, item.name]));
      syncHiddenFallback(selectedSet);
      renderSelectedFallback(selectedSet, selectedContainer);

      if (!input || !container) return;

      let timeout = null;
      input.addEventListener('input', () => {
        if (timeout) clearTimeout(timeout);
        const q = (input.value || '').trim();
        timeout = setTimeout(() => doSearch(q, container, selectedSet), 250);
      });

      container.addEventListener('click', (e) => {
        const li = e.target.closest('li');
        if (!li) return;
        const id = li.dataset.ingId;
        const name = li.textContent;
        if (!id) return;
        if (selectedSet.has(id)) selectedSet.delete(id);
        else selectedSet.set(id, name);
        renderSelectedFallback(selectedSet, selectedContainer);
        syncHiddenFallback(selectedSet);
      });
    }

    if (document.readyState !== 'loading') wire();
    else document.addEventListener('DOMContentLoaded', wire);
    document.addEventListener('turbo:load', wire);
  })();
</script>
